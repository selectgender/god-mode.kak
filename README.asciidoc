= God Mode - for alt-key haters

This is a plugin for Kakoune that is inspired by
https://github.com/emacsorphanage/god-mode[Emacs' God Mode] that gives the
user a locked mode to emulate the `alt` bindings.

The mappings are only applied after you call `god-mode-activate-mappings`. To
modify which keys are mapped, make sure you change the alt binding options
listed below *before* calling the command. These options are listed in the
documentation.

= Installing God Mode

== Manually

This is the preferred method as this is not a plugin designed to be updated
often and there may be some unnecessary files you do not want in your
configuration.

To install manually, copy the file `god-mode.kak` into your `autoload`
directory. Visit the
https://github.com/mawww/kakoune/wiki/Installing-Plugins[Kakoune wiki page] for
more details.

== With https://github.com/andreyorst/plug.kak[plug.kak]

[source,kak]
----
plug "selectgender/god-mode.kak" config %{
	map global normal v ':enter-user-mode god-mode<ret>'
	god-mode-activate-mappings
}
----

== With https://github.com/jdugan6240/kak-bundle[kak-bundle]

[source,kak]
----
bundle god-mode.kak https://github.com/selectgender/god-mode.kak %{
	map global normal v ':enter-user-mode god-mode<ret>'
	god-mode-activate-mappings
}
----

= Usage

It is as simple as setting the user mode binding and activating the bindings:

[source,kak]
----
map global normal v ':enter-user-mode god-mode<ret>'
god-mode-activate-mappings
----

If you want to modify the bindings, then you can set the documented options:

[source,kak]
----
map global normal v ':enter-user-mode god-mode<ret>'

set-option -add global god_alt_bindings '+'
set-option global god_alt_to_char_bindings 'f' 't'

god-mode-activate-mappings
----

= Explicit Approach

Many people prefer manually binding each key instead of the shell expansion
approach that this plugin takes.

If you are one of those people, then consider using these code snippets by
https://github.com/alexherbo2[@alexherbo2] and see if it works for you.

== god_mode_commands.kak

[source,kak]
----
define-command reenter_god_mode_after_key -params 1 %{
	execute-keys -with-hooks %arg{1}
	enter_god_mode
}

define-command reenter_god_mode_after_to_char_key -params 1 %{
	reenter_god_mode_after_mode_change 'next-key[to-char]' %arg{1}
}

define-command reenter_god_mode_after_prompt_key -params 1 %{
	reenter_god_mode_after_mode_change 'prompt' %arg{1}
}

define-command reenter_god_mode_after_goto_key -params 1 %{
	reenter_god_mode_after_mode_change 'next-key[goto]' %arg{1}
}

define-command reenter_god_mode_after_mode_change -params 2 %{
	hook -once window ModeChange "\Qpop:%arg{1}:normal\E" %{
		enter_god_mode
	}
	execute-keys -with-hooks %arg{2}
}
----

== god_mode.kak

[source,kak]
----
declare-user-mode god

define-command enter_god_mode %{
	enter-user-mode god
}

map -docstring 'next search match' global god n ':reenter_god_mode_after_key <lt>a-n<gt><ret>'

map -docstring 'search forward for {char}' global god f ':reenter_god_mode_after_to_char_key <lt>a-f<gt><ret>'

map -docstring 'search forward for {pattern}' global god / ':reenter_god_mode_after_prompt_key <lt>a-/<gt><ret>'
----

= Credits
* https://github.com/emacsorphanage/god-mode[god-mode] for inspiration.
* https://github.com/alexherbo2/dotfiles/blob/master/.local/share/kak/autoload/user_modes/extend_mode/extend_mode.kak[extend_mode.kak] for `god-mode-change-reenter` application.
* https://github.com/alexherbo2/dotfiles/blob/master/.local/share/kak/autoload/user_modes/extend_mode/extend_mode_commands.kak#L27-L32[extend_mode_commands.kak] for `god-mode-change-reenter` implementation.
* https://github.com/Screwtapello[@Screwtapehello] for telling me about `:on-key`.
* https://github.com/alexherbo2[@alexherbo2] for:
** Telling me about `-lock` in `enter-user-mode`.
** The ENTIRETY of the `god-mode-change-reenter`.
** Many of the concerns and considerations in the q&a.
** Encouraging me to make this into a fully fledged repository.
** Sharing extend-mode and its genius.
** Providing the explicit approach
